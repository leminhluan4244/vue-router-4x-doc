import{_ as s,N as t,o as e,p as o,H as p,v as n,r as c,W as r}from"./plugin-vue_export-helper.463a469f.js";const b='{"title":"Different History modes","description":"","frontmatter":{},"headers":[{"level":2,"title":"Hash Mode","slug":"hash-mode"},{"level":2,"title":"HTML5 Mode","slug":"html5-mode"},{"level":2,"title":"Memory mode","slug":"memory-mode"},{"level":2,"title":"Example Server Configurations","slug":"example-server-configurations"},{"level":3,"title":"Apache","slug":"apache"},{"level":3,"title":"nginx","slug":"nginx"},{"level":3,"title":"Native Node.js","slug":"native-node-js"},{"level":3,"title":"Express with Node.js","slug":"express-with-node-js"},{"level":3,"title":"Internet Information Services (IIS)","slug":"internet-information-services-iis"},{"level":3,"title":"Caddy v2","slug":"caddy-v2"},{"level":3,"title":"Caddy v1","slug":"caddy-v1"},{"level":3,"title":"Firebase hosting","slug":"firebase-hosting"},{"level":3,"title":"Netlify","slug":"netlify"},{"level":3,"title":"Vercel","slug":"vercel"},{"level":2,"title":"Caveat","slug":"caveat"}],"relativePath":"guide/essentials/history-mode.md","lastUpdated":1665388136080}',l={},i=n("h1",{id:"different-history-modes",tabindex:"-1"},[c("Different History modes "),n("a",{class:"header-anchor",href:"#different-history-modes","aria-hidden":"true"},"#")],-1),u=r(`<p>The <code>history</code> option when creating the router instance allows us to choose among different history modes.</p><h2 id="hash-mode" tabindex="-1">Hash Mode <a class="header-anchor" href="#hash-mode" aria-hidden="true">#</a></h2><p>The hash history mode is created with <code>createWebHashHistory()</code>:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHashHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>It uses a hash character (<code>#</code>) before the actual URL that is internally passed. Because this section of the URL is never sent to the server, it doesn&#39;t require any special treatment on the server level. <strong>It does however have a bad impact in SEO</strong>. If that&#39;s a concern for you, use the HTML5 history mode.</p><h2 id="html5-mode" tabindex="-1">HTML5 Mode <a class="header-anchor" href="#html5-mode" aria-hidden="true">#</a></h2><p>The HTML5 mode is created with <code>createWebHistory()</code> and is the recommended mode:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createWebHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>When using <code>createWebHistory()</code>, the URL will look &quot;normal,&quot; e.g. <code>https://example.com/user/id</code>. Beautiful!</p><p>Here comes a problem, though: Since our app is a single page client side app, without a proper server configuration, the users will get a 404 error if they access <code>https://example.com/user/id</code> directly in their browser. Now that&#39;s ugly.</p><p>Not to worry: To fix the issue, all you need to do is add a simple catch-all fallback route to your server. If the URL doesn&#39;t match any static assets, it should serve the same <code>index.html</code> page that your app lives in. Beautiful, again!</p><h2 id="memory-mode" tabindex="-1">Memory mode <a class="header-anchor" href="#memory-mode" aria-hidden="true">#</a></h2><p>The memory history mode doesn&#39;t assume a browser environment and therefore doesn&#39;t interact with the URL <strong>nor automatically triggers the initial navigation</strong>. This makes it perfect for Node environment and SSR. It is created with <code>createMemoryHistory()</code> and <strong>requires you to push the initial navigation</strong> after calling <code>app.use(router)</code>.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRouter<span class="token punctuation">,</span> createMemoryHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createMemoryHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">//...</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>While it&#39;s not recommended, you can use this mode inside Browser applications but note <strong>there will be no history</strong>, meaning you won&#39;t be able to go <em>back</em> or <em>forward</em>.</p><h2 id="example-server-configurations" tabindex="-1">Example Server Configurations <a class="header-anchor" href="#example-server-configurations" aria-hidden="true">#</a></h2><p><strong>Note</strong>: The following examples assume you are serving your app from the root folder. If you deploy to a subfolder, you should use <a href="https://cli.vuejs.org/config/#publicpath" target="_blank" rel="noopener noreferrer">the <code>publicPath</code> option of Vue CLI</a> and the related <a href="./../../api/#createwebhistory"><code>base</code> property of the router</a>. You also need to adjust the examples below to use the subfolder instead of the root folder (e.g. replacing <code>RewriteBase /</code> with <code>RewriteBase /name-of-your-subfolder/</code>).</p><h3 id="apache" tabindex="-1">Apache <a class="header-anchor" href="#apache" aria-hidden="true">#</a></h3><div class="language-apacheconf"><pre><code><span class="token directive-block tag"><span class="token directive-block tag"><span class="token punctuation">&lt;</span>IfModule</span><span class="token directive-block-parameter attr-value"> mod_negotiation.c</span><span class="token punctuation">&gt;</span></span>
  <span class="token directive-inline property">Options</span> -MultiViews
<span class="token directive-block tag"><span class="token directive-block tag"><span class="token punctuation">&lt;/</span>IfModule</span><span class="token punctuation">&gt;</span></span>

<span class="token directive-block tag"><span class="token directive-block tag"><span class="token punctuation">&lt;</span>IfModule</span><span class="token directive-block-parameter attr-value"> mod_rewrite.c</span><span class="token punctuation">&gt;</span></span>
  <span class="token directive-inline property">RewriteEngine</span> On
  <span class="token directive-inline property">RewriteBase</span> /
  <span class="token directive-inline property">RewriteRule</span><span class="token regex"> ^index\\.html$</span> - <span class="token directive-flags keyword">[L]</span>
  <span class="token directive-inline property">RewriteCond</span> <span class="token variable">%{REQUEST_FILENAME}</span> !-f
  <span class="token directive-inline property">RewriteCond</span> <span class="token variable">%{REQUEST_FILENAME}</span> !-d
  <span class="token directive-inline property">RewriteRule</span> . /index.html <span class="token directive-flags keyword">[L]</span>
<span class="token directive-block tag"><span class="token directive-block tag"><span class="token punctuation">&lt;/</span>IfModule</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Instead of <code>mod_rewrite</code>, you could also use <a href="https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource" target="_blank" rel="noopener noreferrer"><code>FallbackResource</code></a>.</p><h3 id="nginx" tabindex="-1">nginx <a class="header-anchor" href="#nginx" aria-hidden="true">#</a></h3><div class="language-nginx"><pre><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="native-node-js" tabindex="-1">Native Node.js <a class="header-anchor" href="#native-node-js" aria-hidden="true">#</a></h3><div class="language-js"><pre><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> httpPort <span class="token operator">=</span> <span class="token number">80</span>

http
  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;We cannot open &quot;index.html&quot; file.&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html; charset=utf-8&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>httpPort<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Server listening on: http://localhost:%s&#39;</span><span class="token punctuation">,</span> httpPort<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="express-with-node-js" tabindex="-1">Express with Node.js <a class="header-anchor" href="#express-with-node-js" aria-hidden="true">#</a></h3><p>For Node.js/Express, consider using <a href="https://github.com/bripkens/connect-history-api-fallback" target="_blank" rel="noopener noreferrer">connect-history-api-fallback middleware</a>.</p><h3 id="internet-information-services-iis" tabindex="-1">Internet Information Services (IIS) <a class="header-anchor" href="#internet-information-services-iis" aria-hidden="true">#</a></h3><ol><li>Install <a href="https://www.iis.net/downloads/microsoft/url-rewrite" target="_blank" rel="noopener noreferrer">IIS UrlRewrite</a></li><li>Create a <code>web.config</code> file in the root directory of your site with the following:</li></ol><div class="language-xml"><pre><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rewrite</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rules</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Handle History Mode and custom 404/500<span class="token punctuation">&quot;</span></span> <span class="token attr-name">stopProcessing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>match</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(.*)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conditions</span> <span class="token attr-name">logicalGrouping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>MatchAll<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{REQUEST_FILENAME}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">matchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IsFile<span class="token punctuation">&quot;</span></span> <span class="token attr-name">negate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{REQUEST_FILENAME}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">matchType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IsDirectory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">negate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>conditions</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Rewrite<span class="token punctuation">&quot;</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rules</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rewrite</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="caddy-v2" tabindex="-1">Caddy v2 <a class="header-anchor" href="#caddy-v2" aria-hidden="true">#</a></h3><div class="language-"><pre><code>try_files {path} /
</code></pre></div><h3 id="caddy-v1" tabindex="-1">Caddy v1 <a class="header-anchor" href="#caddy-v1" aria-hidden="true">#</a></h3><div class="language-"><pre><code>rewrite {
    regexp .*
    to {path} /
}
</code></pre></div><h3 id="firebase-hosting" tabindex="-1">Firebase hosting <a class="header-anchor" href="#firebase-hosting" aria-hidden="true">#</a></h3><p>Add this to your <code>firebase.json</code>:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>
  <span class="token property">&quot;hosting&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;public&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;rewrites&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;**&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;destination&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/index.html&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="netlify" tabindex="-1">Netlify <a class="header-anchor" href="#netlify" aria-hidden="true">#</a></h3><p>Create a <code>_redirects</code> file that is included with your deployed files:</p><div class="language-"><pre><code>/* /index.html 200
</code></pre></div><p>In vue-cli, nuxt, and vite projects, this file usually goes under a folder named <code>static</code> or <code>public</code>.</p><p>You can more about the syntax on <a href="https://docs.netlify.com/routing/redirects/rewrites-proxies/#history-pushstate-and-single-page-apps" target="_blank" rel="noopener noreferrer">Netlify documentation</a>. You can also <a href="https://docs.netlify.com/configure-builds/file-based-configuration/" target="_blank" rel="noopener noreferrer">create a <code>netlify.toml</code></a> to combine <em>redirections</em> with other Netlify features.</p><h3 id="vercel" tabindex="-1">Vercel <a class="header-anchor" href="#vercel" aria-hidden="true">#</a></h3><p>Create a <code>vercel.json</code> file under the root directory of your project with the following:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>
  <span class="token property">&quot;rewrites&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/:path*&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;destination&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/index.html&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="caveat" tabindex="-1">Caveat <a class="header-anchor" href="#caveat" aria-hidden="true">#</a></h2><p>There is a caveat to this: Your server will no longer report 404 errors as all not-found paths now serve up your <code>index.html</code> file. To get around the issue, you should implement a catch-all route within your Vue app to show a 404 page:</p><div class="language-js"><pre><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">history</span><span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/:pathMatch(.*)&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> NotFoundComponent <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>Alternatively, if you are using a Node.js server, you can implement the fallback by using the router on the server side to match the incoming URL and respond with 404 if no route is matched. Check out the <a href="https://v3.vuejs.org/guide/ssr/introduction.html#what-is-server-side-rendering-ssr" target="_blank" rel="noopener noreferrer">Vue server side rendering documentation</a> for more information.</p>`,48);function k(d,h,g,m,f,y){const a=t("VueSchoolLink");return e(),o("div",null,[i,p(a,{href:"https://vueschool.io/lessons/history-mode",title:"Learn about the differences between Hash Mode and HTML5 Mode"}),u])}var w=s(l,[["render",k]]);export{b as __pageData,w as default};
