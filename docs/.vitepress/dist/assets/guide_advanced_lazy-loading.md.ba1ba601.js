import{_ as a,N as e,o as t,p as o,H as p,v as n,r as c,W as r}from"./plugin-vue_export-helper.463a469f.js";const v='{"title":"Lazy Loading Routes","description":"","frontmatter":{},"headers":[{"level":2,"title":"Grouping Components in the Same Chunk","slug":"grouping-components-in-the-same-chunk"},{"level":3,"title":"With webpack","slug":"with-webpack"},{"level":3,"title":"With Vite","slug":"with-vite"}],"relativePath":"guide/advanced/lazy-loading.md","lastUpdated":1665388136064}',i={},l=n("h1",{id:"lazy-loading-routes",tabindex:"-1"},[c("Lazy Loading Routes "),n("a",{class:"header-anchor",href:"#lazy-loading-routes","aria-hidden":"true"},"#")],-1),u=r(`<p>When building apps with a bundler, the JavaScript bundle can become quite large, and thus affect the page load time. It would be more efficient if we can split each route&#39;s components into separate chunks, and only load them when the route is visited.</p><p>Vue Router supports <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noopener noreferrer">dynamic imports</a> out of the box, meaning you can replace static imports with dynamic ones:</p><div class="language-js"><pre><code><span class="token comment">// replace</span>
<span class="token comment">// import UserDetails from &#39;./views/UserDetails&#39;</span>
<span class="token comment">// with</span>
<span class="token keyword">const</span> <span class="token function-variable function">UserDetails</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./views/UserDetails&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/users/:id&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserDetails <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>The <code>component</code> (and <code>components</code>) option accepts a function that returns a Promise of a component and Vue Router <strong>will only fetch it when entering the page for the first time</strong>, then use the cached version. Which means you can also have more complex functions as long as they return a Promise:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">UserDetails</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">/* component definition */</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>In general, it&#39;s a good idea <strong>to always use dynamic imports</strong> for all your routes.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Do <strong>not</strong> use <a href="https://v3.vuejs.org/guide/component-dynamic-async.html#async-components" target="_blank" rel="noopener noreferrer">Async components</a> for routes. Async components can still be used inside route components but route component themselves are just dynamic imports.</p></div><p>When using a bundler like webpack, this will automatically benefit from <a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noopener noreferrer">code splitting</a></p><p>When using Babel, you will need to add the <a href="https://babeljs.io/docs/plugins/syntax-dynamic-import/" target="_blank" rel="noopener noreferrer">syntax-dynamic-import</a> plugin so that Babel can properly parse the syntax.</p><h2 id="grouping-components-in-the-same-chunk" tabindex="-1">Grouping Components in the Same Chunk <a class="header-anchor" href="#grouping-components-in-the-same-chunk" aria-hidden="true">#</a></h2><h3 id="with-webpack" tabindex="-1">With webpack <a class="header-anchor" href="#with-webpack" aria-hidden="true">#</a></h3><p>Sometimes we may want to group all the components nested under the same route into the same async chunk. To achieve that we need to use <a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noopener noreferrer">named chunks</a> by providing a chunk name using a special comment syntax (requires webpack &gt; 2.4):</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">UserDetails</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="token string">&#39;./UserDetails.vue&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">UserDashboard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="token string">&#39;./UserDashboard.vue&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">UserProfileEdit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="token string">&#39;./UserProfileEdit.vue&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>webpack will group any async module with the same chunk name into the same async chunk.</p><h3 id="with-vite" tabindex="-1">With Vite <a class="header-anchor" href="#with-vite" aria-hidden="true">#</a></h3><p>In Vite you can define the chunks under the <a href="https://vitejs.dev/config/#build-rollupoptions" target="_blank" rel="noopener noreferrer"><code>rollupOptions</code></a>:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// https://rollupjs.org/guide/en/#outputmanualchunks</span>
      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">manualChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;group-user&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">&#39;./src/UserDetails&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;./src/UserDashboard&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;./src/UserProfileEdit&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,17);function k(d,h,m,g,y,f){const s=e("VueSchoolLink");return t(),o("div",null,[l,p(s,{href:"https://vueschool.io/lessons/lazy-loading-routes-vue-cli-only",title:"Learn about lazy loading routes"}),u])}var w=a(i,[["render",k]]);export{v as __pageData,w as default};
