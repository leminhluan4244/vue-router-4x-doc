import{_ as a,N as e,o as t,p,H as o,v as n,r,W as c}from"./plugin-vue_export-helper.463a469f.js";const _='{"title":"Redirect and Alias","description":"","frontmatter":{},"headers":[{"level":2,"title":"Redirect","slug":"redirect"},{"level":3,"title":"Relative redirecting","slug":"relative-redirecting"},{"level":2,"title":"Alias","slug":"alias"}],"relativePath":"guide/essentials/redirect-and-alias.md","lastUpdated":1665388136080}',l={},i=n("h1",{id:"redirect-and-alias",tabindex:"-1"},[r("Redirect and Alias "),n("a",{class:"header-anchor",href:"#redirect-and-alias","aria-hidden":"true"},"#")],-1),u=c(`<h2 id="redirect" tabindex="-1">Redirect <a class="header-anchor" href="#redirect" aria-hidden="true">#</a></h2><p>Redirecting is also done in the <code>routes</code> configuration. To redirect from <code>/home</code> to <code>/</code>:</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre></div><p>The redirect can also be targeting a named route:</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;homepage&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre></div><p>Or even use a function for dynamic redirecting:</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// /search/screens -&gt; /search?q=screens</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/search/:searchText&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">redirect</span><span class="token operator">:</span> <span class="token parameter">to</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// the function receives the target route as the argument</span>
      <span class="token comment">// we return a redirect path/location here.</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/search&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">q</span><span class="token operator">:</span> to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>searchText <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/search&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>Note that <strong><a href="./../advanced/navigation-guards.html">Navigation Guards</a> are not applied on the route that redirects, only on its target</strong>. e.g. In the above example, adding a <code>beforeEnter</code> guard to the <code>/home</code> route would not have any effect.</p><p>When writing a <code>redirect</code>, you can omit the <code>component</code> option because it is never directly reached so there is no component to render. The only exception are <a href="./nested-routes.html">nested routes</a>: if a route record has <code>children</code> and a <code>redirect</code> property, it should also have a <code>component</code> property.</p><h3 id="relative-redirecting" tabindex="-1">Relative redirecting <a class="header-anchor" href="#relative-redirecting" aria-hidden="true">#</a></h3><p>It&#39;s also possible to redirect to a relative location:</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// will always redirect /users/123/posts to /users/123/profile</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/users/:id/posts&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">redirect</span><span class="token operator">:</span> <span class="token parameter">to</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// the function receives the target route as the argument</span>
      <span class="token comment">// a relative location doesn&#39;t start with \`/\`</span>
      <span class="token comment">// or { path: &#39;profile&#39;}</span>
      <span class="token keyword">return</span> <span class="token string">&#39;profile&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><h2 id="alias" tabindex="-1">Alias <a class="header-anchor" href="#alias" aria-hidden="true">#</a></h2><p>A redirect means when the user visits <code>/home</code>, the URL will be replaced by <code>/</code>, and then matched as <code>/</code>. But what is an alias?</p><p><strong>An alias of <code>/</code> as <code>/home</code> means when the user visits <code>/home</code>, the URL remains <code>/home</code>, but it will be matched as if the user is visiting <code>/</code>.</strong></p><p>The above can be expressed in the route configuration as:</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Homepage<span class="token punctuation">,</span> <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre></div><p>An alias gives you the freedom to map a UI structure to an arbitrary URL, instead of being constrained by the configuration&#39;s nesting structure. Make the alias start with a <code>/</code> to make the path absolute in nested routes. You can even combine both and provide multiple aliases with an array:</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/users&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> UsersLayout<span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// this will render the UserList for these 3 URLs</span>
      <span class="token comment">// - /users</span>
      <span class="token comment">// - /users/list</span>
      <span class="token comment">// - /people</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserList<span class="token punctuation">,</span> <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;/people&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>If your route has parameters, make sure to include them in any absolute alias:</p><div class="language-js"><pre><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/users/:id&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> UsersByIdLayout<span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// this will render the UserDetails for these 3 URLs</span>
      <span class="token comment">// - /users/24</span>
      <span class="token comment">// - /users/24/profile</span>
      <span class="token comment">// - /24</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;profile&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserDetails<span class="token punctuation">,</span> <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p><strong>Note about SEO</strong>: when using aliases, make sure to <a href="https://support.google.com/webmasters/answer/139066?hl=en" target="_blank" rel="noopener noreferrer">define canonical links</a>.</p>`,22);function k(d,h,m,g,y,v){const s=e("VueSchoolLink");return t(),p("div",null,[i,o(s,{href:"https://vueschool.io/lessons/vue-router-4-redirect-and-alias",title:"Learn how to use redirect and alias"}),u])}var w=a(l,[["render",k]]);export{_ as __pageData,w as default};
